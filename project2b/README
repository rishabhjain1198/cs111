#NAME: RISHABH JAIN
#EMAIL: rishabh.jain1198@gmail.com
#ID: 604817863

lab2_list.c
One of the source files for part 2B, contains test driver program for 
linked list.

SortedList.c
Another source file for part 2B, containing implementation of linked list.

SortedList.h
Header file containing interface for linked list. Not modified.

Makefile
Containing targets as specified.

README
This file.

PNG files
Files graphed using gnuplot.

lab2_list.gp
Script to graph csv file

lab2_list.csv
CSV file containing data generated through make tests.

Main problem in this assignment was trying to deal with make dist 
problem in the sanity checking test script, as well as making sublists work 
without getting segmentation errors.


ANSWERS TO QUESTIONS IN SPEC.

2.3.1
A lot of time is spent in list operations since they are costlier 
than locks. This is because number of threads is very low.

Continously checking the spin-lock costs the most for high thread spin-lock 
tests.

If list length is really long, then list operations like lookup are extremely 
costly. However, if length is not long, then context-switches will turn out to 
be more expensive than list ops in high thread mutex tests.

2.3.2
The checking of testing the spin-lock line consumes by far the most cycles in 
a test with a large number of threads.

This is because of aggressive memory contention. When the number of threads 
increases, the amount of time other threads will have to wait while a thread 
accesses the memory also increases. While the other threads are waiting, they 
make the CPU do busywork in the form of spin-lock checks, which thus account 
for most of the CPU cycles.

2.3.3
Since more threads want access to the same lock, the waiting time for it 
naturally increases.

There is higher memory contention, which slightly increases the completion 
time, which counts the time for contention / context switch.

The completion time indicates the wall time for the whole operation.
The wait time calculates the wall time for all the threads combined, which 
leads to a much larger sum. These two metrics are thus completely separate, 
and any comparison would be meaningless since the threads probably have a 
large amount of overlapping time which is counted multiple times.

2.3.4
Change in performance is positive, as the number of lists increases. This is 
because when there are more lists, memory contention decreases, since the 
length is smaller.

It will continue increasing up till the point the CPU is running the maximum 
number of threads it can on its cores with real parallelism. When you increase 
the number of sublists beyond that point, the CPU will implement virtual 
parallelism, which will not give any performance boost. 

No. Making sublists reduces the average size of the list, thus also reducing 
the time in the critical section. So the possibility of contention is 
decreased upon list partitioning.
